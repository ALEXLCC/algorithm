非必要不写默认构造函数。

类型转换函数  慎用
如 operator double() const;
构造函数等  隐式转换  编译器隐式调用。

前置后置++运算符
后置重载是带一个 int参数
前置返回一个引用  后置返回一个const 对象
后置++返回一个临时对象  会构造和析构

const对象不能调用非常量成员。

operator &&
if(exp1&&exp2)
----->compiler
if(exp1.operator&& (exp2))	---->as member function
函数调用完成时,所有参数都被评估。
if(operator&& (exp1,exp2))	---->as global function
但是此种穿法并未规定参数入栈的顺序。
不知道那个会先被评估。也就没有了短路的特性。
如果表达式有,则,左侧会先被评估。

不能重载的运算符。
.  .*  ::  ?:
new delete sizeof typeid 
static_cast<>  dynamic_cast<>  const_cast<> reinterpret_cast<>


new操作符
分配内存
调用构造函数
如果有赋值则执行赋值运算

operator new
void * operator new (size_t size);

void* rawMemory=operator new(sizeof(string));
operator new 只负责分配内存(和malloc一样)它不知道构造函数。

string *ps=new string("Memory Management");
----->
void* memory=operator new(sizeof(string));
call string::string("Memory Management") on *memory	//编译器可做,程序员不能。
string *ps=static_cast<string*>(memory);

constructor初始化对象,而对象只可以初始化一次。


delete

string* ps;
delete ps;
void operator delete(void* memoryToBeDeallocated);	//内存释放

ps->~string();
operator delete(ps);

delete只能释放由new分配的内存。

placement new  #include<new>
placement new 分配的内存不能由delete释放。

数组。
operator new[]
operator delete []
两者会针对数组的每个元素调用constructor或者destructor
